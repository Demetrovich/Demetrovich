import React, { useState } from 'react';
import { useCrypto } from '../context/CryptoContext';
import LoadingSpinner from './LoadingSpinner';

const PredictionPanel: React.FC = () => {
  const { predictions, loading, error, trainModel, fetchPredictions } = useCrypto();
  const [selectedSymbol, setSelectedSymbol] = useState('BTC');
  const [trainingStatus, setTrainingStatus] = useState<{ [key: string]: 'idle' | 'training' | 'success' | 'error' }>({});

  const symbols = ['BTC', 'ETH'];

  const handleTrainModel = async (symbol: string) => {
    setTrainingStatus(prev => ({ ...prev, [symbol]: 'training' }));
    try {
      await trainModel(symbol);
      setTrainingStatus(prev => ({ ...prev, [symbol]: 'success' }));
      setTimeout(() => {
        setTrainingStatus(prev => ({ ...prev, [symbol]: 'idle' }));
      }, 3000);
    } catch (err) {
      setTrainingStatus(prev => ({ ...prev, [symbol]: 'error' }));
      setTimeout(() => {
        setTrainingStatus(prev => ({ ...prev, [symbol]: 'idle' }));
      }, 3000);
    }
  };

  const handleRefreshPredictions = async () => {
    await fetchPredictions();
  };

  if (loading && predictions.length === 0) {
    return <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤..." />;
  }

  return (
    <div className="prediction-panel">
      <div className="card">
        <div className="card-header">
          <h1 className="card-title">üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã BTC & ETH</h1>
          <button 
            className="btn btn-primary"
            onClick={handleRefreshPredictions}
            disabled={loading}
          >
            {loading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
          </button>
        </div>
        <p>–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è Bitcoin –∏ Ethereum</p>
      </div>

      <div className="grid grid-2">
        <div className="card">
          <h2 className="card-title">üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</h2>
          <p className="mb-3">–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:</p>
          
          <div className="grid grid-2">
            {symbols.map(symbol => (
              <div key={symbol} className="crypto-card">
                <div className="crypto-header">
                  <div className="crypto-symbol">{symbol}</div>
                  <div className={`status-indicator ${
                    trainingStatus[symbol] === 'success' ? 'success' :
                    trainingStatus[symbol] === 'error' ? 'error' :
                    trainingStatus[symbol] === 'training' ? 'warning' : ''
                  }`}>
                    {trainingStatus[symbol] === 'training' && '‚è≥'}
                    {trainingStatus[symbol] === 'success' && '‚úÖ'}
                    {trainingStatus[symbol] === 'error' && '‚ùå'}
                    {trainingStatus[symbol] === 'idle' && '‚≠ï'}
                  </div>
                </div>
                
                <button
                  className={`btn ${
                    trainingStatus[symbol] === 'training' ? 'btn-secondary' : 'btn-primary'
                  } w-full`}
                  onClick={() => handleTrainModel(symbol)}
                  disabled={trainingStatus[symbol] === 'training'}
                >
                  {trainingStatus[symbol] === 'training' ? '–û–±—É—á–µ–Ω–∏–µ...' : '–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å'}
                </button>
              </div>
            ))}
          </div>
        </div>

        <div className="card">
          <h2 className="card-title">üìä –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã</h2>
          {error && (
            <div className="status-indicator error mb-3">
              {error}
            </div>
          )}
          
          {predictions.length > 0 ? (
            <div className="grid">
              {predictions.map(prediction => (
                <div key={prediction.symbol} className="prediction-card">
                  <div className="prediction-header">
                    <div className="prediction-symbol">
                      {prediction.direction === 'bullish' ? 'üöÄ' : 
                       prediction.direction === 'bearish' ? 'üìâ' : '‚û°Ô∏è'} 
                      {prediction.symbol}
                    </div>
                    <div className={`prediction-direction ${prediction.direction}`}>
                      {prediction.direction === 'bullish' ? '–†–æ—Å—Ç' :
                       prediction.direction === 'bearish' ? '–ü–∞–¥–µ–Ω–∏–µ' : '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'}
                    </div>
                  </div>
                  
                  <div className="prediction-details">
                    <div className="prediction-detail">
                      <div className="prediction-detail-label">–ü—Ä–æ–≥–Ω–æ–∑</div>
                      <div className="prediction-detail-value">
                        {(prediction.prediction * 100).toFixed(1)}%
                      </div>
                    </div>
                    
                    <div className="prediction-detail">
                      <div className="prediction-detail-label">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                      <div className="prediction-detail-value">
                        {prediction.confidence}%
                      </div>
                    </div>
                    
                    <div className="prediction-detail">
                      <div className="prediction-detail-label">–¢–æ—á–Ω–æ—Å—Ç—å</div>
                      <div className="prediction-detail-value">
                        {prediction.modelAccuracy.toFixed(1)}%
                      </div>
                    </div>
                    
                    <div className="prediction-detail">
                      <div className="prediction-detail-label">–í—Ä–µ–º—è</div>
                      <div className="prediction-detail-value">
                        {new Date(prediction.timestamp).toLocaleTimeString('ru-RU')}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center p-3">
              <p>–ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</p>
              <p className="text-sm text-gray-400">–û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</p>
            </div>
          )}
        </div>
      </div>

      <div className="card">
        <h2 className="card-title">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö</h2>
        <div className="grid grid-3">
          <div>
            <h3 className="font-bold mb-2">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã?</h3>
            <p className="text-sm text-gray-400">
              –ú–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD, —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ) 
              –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã.
            </p>
          </div>
          <div>
            <h3 className="font-bold mb-2">–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</h3>
            <p className="text-sm text-gray-400">
              –¢–æ—á–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. 
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞.
            </p>
          </div>
          <div>
            <h3 className="font-bold mb-2">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h3>
            <p className="text-sm text-gray-400">
              –ú–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥. 
              –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PredictionPanel;