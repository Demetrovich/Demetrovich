import React, { useEffect } from 'react';
import { useCrypto } from '../context/CryptoContext';
import CryptoCard from './CryptoCard';
import PredictionCard from './PredictionCard';
import LoadingSpinner from './LoadingSpinner';

const Dashboard: React.FC = () => {
  const { cryptoData, predictions, loading, error, fetchCryptoData, fetchPredictions } = useCrypto();

  useEffect(() => {
    const interval = setInterval(() => {
      fetchCryptoData();
      fetchPredictions();
    }, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [fetchCryptoData, fetchPredictions]);

  if (loading && cryptoData.length === 0) {
    return <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..." />;
  }

  if (error) {
    return (
      <div className="card">
        <div className="text-center">
          <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h2>
          <p>{error}</p>
          <button 
            className="btn btn-primary mt-2"
            onClick={() => {
              fetchCryptoData();
              fetchPredictions();
            }}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard">
      <div className="card">
        <div className="card-header">
          <h1 className="card-title">üìä –î–∞—à–±–æ—Ä–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</h1>
          <div className="status-indicator success">
            <span>üü¢</span>
            <span>–ê–∫—Ç–∏–≤–Ω–æ</span>
          </div>
        </div>
        <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
      </div>

      <div className="grid grid-2">
        <div className="card">
          <h2 className="card-title">üí∞ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã</h2>
          <div className="grid grid-2">
            {cryptoData.map(crypto => (
              <CryptoCard key={crypto.symbol} crypto={crypto} />
            ))}
          </div>
        </div>

        <div className="card">
          <h2 className="card-title">üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã</h2>
          <div className="grid">
            {predictions.length > 0 ? (
              predictions.map(prediction => (
                <PredictionCard key={prediction.symbol} prediction={prediction} />
              ))
            ) : (
              <div className="text-center p-3">
                <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</p>
                <p className="text-sm">–û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</p>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="card">
        <h2 className="card-title">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <div className="grid grid-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-400">{cryptoData.length}</div>
            <div className="text-sm text-gray-400">–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-400">{predictions.length}</div>
            <div className="text-sm text-gray-400">–ü—Ä–æ–≥–Ω–æ–∑–æ–≤</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-yellow-400">
              {predictions.filter(p => p.direction === 'bullish').length}
            </div>
            <div className="text-sm text-gray-400">–†–æ—Å—Ç</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-red-400">
              {predictions.filter(p => p.direction === 'bearish').length}
            </div>
            <div className="text-sm text-gray-400">–ü–∞–¥–µ–Ω–∏–µ</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;